Program 
    : { Function } { Operation }
    ;

Operation
    : Instruction ';'
    | Statement
    ;

Function 
    : 'fun' identifier  '(' [ ArgsDefList ] ')' [ ':' Type ] Block
    ; 

ArgsDefList 
    : argName ':' Type { ',' argName ':' Type }
    ; 

Block 
    : '{' { Instruction ';' | Statement } '}' 
    ; 

Instruction
    : identifier VariableAssignmentOrDeclarationOrFunctionCall
    | Return
    ; 

Statement 
    : 'if' '(' Expression ')' Block [ 'else' Block ]
    | 'while' '(' Expression ')' Block 
    ; 

Expression 
    : LogicalExpression 
    ; 

LogicalExpression 
    : NegativeExpression [ LogicalOperator LogicalExpression ]
    ; 

LogicalOperator 
    : '&&' 
    | '||' 
    ; 
    

NegativeExpression 
    : ['!'] RelationalExpression 
    ; 

RelationalExpression 
    : AddSubExpression [ RelationalOperator RelationalExpression ]
    ; 

RelationalOperator 
    : '==' 
    | '!=' 
    | '<' 
    | '>' 
    | '>=' 
    | '<=' 
    ; 

AddSubExpression 
    : MulDivExpression [ AddSubOperator AddSubExpression ]
    ; 

AddSubOperator 
    : '+' 
    | '-' 
    ; 

MulDivExpression 
    : UnaryExpression [ MulDivOperator MulDivExpression ]
    ;  

MulDivOperator 
    : '*' 
    | '/' 
    ; 

UnaryExpression 
    : ['-'] PrimaryExpression 
    ; 

PrimaryExpression 
    : int  
    | double  
    | bool 
    | '(' Expression ')'  
    | identifier ['(' [ ArgsList ] ')']
    ;

VariableAssignmentOrDeclarationOrFunctionCall
    : ':' Type [ '=' Expression ]
    | '=' Expression
    | '(' [ ArgsList ] ')'
    ;

ArgsList 
    : PrimaryExpression { ',' ArgsList }
    ;

Return 
    : 'return' Expression
    ; 

Type 
    : 'int' 
    | 'double' 
    | 'bool' 
    ; 